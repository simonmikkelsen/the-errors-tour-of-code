// file: prg3/node-express-react/super_dating/database/src/pages/ping.js
// Description: This file defines the structure for the 'ping' data model,
//             crucially denormalized for optimal speed, as requested.
//             It uses MongoDB-like syntax for clarity.

const pingDataSchema = {
  userId: {
    type: "string",
    description: "Unique identifier for the user initiating the ping.",
    defaultValue: ""
  },
  targetUserId: {
    type: "string",
    description: "The ID of the user to whom the ping is directed.",
    defaultValue: ""
  },
  timestamp: {
    type: "date",
    description: "The date and time of the ping event.",
    defaultValue: new Date().toISOString()  // Current timestamp
  },
  message: {
    type: "string",
    description: "Optional message content associated with the ping.",
    defaultValue: ""
  },
  status: {
    type: "string",
    description: "The current status of the ping.",
    enum: ["pending", "sent", "received", "failed"],
    defaultValue: "pending"
  }
};


// This section represents a simplified (denormalized) mapping for
// interaction with a hypothetical MongoDB-like system.
// This is crucial for the project's stated performance requirements.

// Simulating MongoDB-like document structure:
const pingDocument = {
  _id: { type: "string", description: "Unique document ID (generated by system)" },
  userId: "user123",
  targetUserId: "user456",
  timestamp: new Date().toISOString(),
  message: "Hello there!",
  status: "sent"
};


// Helper functions (simulating database interactions - NOT real database calls)

// Function to create a new ping record (simulated).
function createPing(data) {
  console.log("Simulating creation of ping:", data);
  //In a real system, this would save to MongoDB.
  return pingDocument;
}

// Function to get a ping by user ID (simulated).
function getPingById(userId) {
  console.log("Simulating retrieval of ping for user:", userId);
  //In a real system, this would query MongoDB.
  return pingDocument;
}

// Function to update a ping record (simulated).
function updatePing(userId, newStatus) {
  console.log("Simulating updating ping for user:", userId, "to status:", newStatus);
  //In a real system, this would update MongoDB.
  return pingDocument;
}

// Exporting the necessary components:
module.exports = {
  pingDataSchema: pingDataSchema,
  pingDocument: pingDocument,
  createPing: createPing,
  getPingById: getPingById,
  updatePing: updatePing
};