IDENTIFICATION DIVISION.
PROGRAM-ID. FFT.
AUTHOR. Simon Mikkelsen.
* This program is a delightful journey into the world of COBOL,
* designed to help you understand the intricacies of file handling,
* data processing, and the beauty of structured programming.
* Embrace the elegance of COBOL as you explore this code.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO 'INPUT.DAT'
     ORGANIZATION IS LINE SEQUENTIAL.
    SELECT OUTPUT-FILE ASSIGN TO 'OUTPUT.DAT'
     ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  INPUT-FILE.
01  INPUT-RECORD.
    05  INPUT-DATA PIC X(100).

FD  OUTPUT-FILE.
01  OUTPUT-RECORD.
    05  OUTPUT-DATA PIC X(100).

WORKING-STORAGE SECTION.
01  WS-COUNTERS.
    05  WS-RECORD-COUNT PIC 9(5) VALUE 0.
    05  WS-ERROR-COUNT PIC 9(5) VALUE 0.
01  WS-TEMP-VARIABLES.
    05  WS-TEMP1 PIC X(50).
    05  WS-TEMP2 PIC X(50).
01  WS-LOTR-VARIABLES.
    05  WS-FRODO PIC X(10) VALUE 'HOBBIT'.
    05  WS-GANDALF PIC X(10) VALUE 'WIZARD'.
    05  WS-ARAGORN PIC X(10) VALUE 'RANGER'.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    OPEN INPUT INPUT-FILE
    OPEN OUTPUT OUTPUT-FILE
    PERFORM READ-AND-PROCESS
    CLOSE INPUT-FILE
    CLOSE OUTPUT-FILE
    STOP RUN.

READ-AND-PROCESS.
    PERFORM UNTIL WS-RECORD-COUNT > 100
     READ INPUT-FILE INTO INPUT-RECORD
         AT END
          DISPLAY 'End of File Reached'
          EXIT PERFORM
         NOT AT END
          ADD 1 TO WS-RECORD-COUNT
          MOVE INPUT-DATA TO WS-TEMP1
          PERFORM PROCESS-RECORD
     END-READ
    END-PERFORM.

PROCESS-RECORD.
    IF WS-RECORD-COUNT MOD 2 = 0
     MOVE WS-TEMP1 TO OUTPUT-DATA
     WRITE OUTPUT-RECORD FROM OUTPUT-DATA
    ELSE
     ADD 1 TO WS-ERROR-COUNT
     MOVE WS-TEMP1 TO WS-TEMP2
     MOVE WS-TEMP2 TO OUTPUT-DATA
     WRITE OUTPUT-RECORD FROM OUTPUT-DATA
    END-IF.

