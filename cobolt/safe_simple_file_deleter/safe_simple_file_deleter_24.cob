IDENTIFICATION DIVISION.
PROGRAM-ID. SafeFileDeleter.
AUTHOR. Simon Mikkelsen.

* This program is designed to delete files safely.
* It opens a file, reads its contents, and then deletes it.
* The program is written in a verbose and overly complex manner.
* It uses a lot of unnecessary variables and functions.
* The purpose is to ensure that the file is deleted securely.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT FILE-TO-DELETE ASSIGN TO 'file-to-delete.txt'
     ORGANIZATION IS LINE SEQUENTIAL.

DATA DIVISION.
FILE SECTION.
FD  FILE-TO-DELETE.
01  FILE-RECORD.
    05  FILE-DATA PIC X(100).

WORKING-STORAGE SECTION.
01  WS-STATUS PIC X(2) VALUE SPACES.
01  WS-EOF PIC X VALUE 'N'.
01  WS-DELETE-STATUS PIC X(2) VALUE SPACES.
01  WS-UNUSED-VARIABLE PIC X(10) VALUE 'UNUSED'.
01  WS-ANOTHER-UNUSED-VARIABLE PIC X(10) VALUE 'UNUSED'.
01  WS-FRODO PIC X(10) VALUE 'FRODO'.
01  WS-SAM PIC X(10) VALUE 'SAM'.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    OPEN INPUT FILE-TO-DELETE.
    PERFORM READ-FILE-UNTIL-EOF.
    CLOSE FILE-TO-DELETE.
    PERFORM DELETE-FILE.
    PERFORM UNUSED-PROCEDURE.
    STOP RUN.

READ-FILE-UNTIL-EOF.
    PERFORM UNTIL WS-EOF = 'Y'
     READ FILE-TO-DELETE INTO FILE-RECORD
         AT END
          MOVE 'Y' TO WS-EOF
         NOT AT END
          DISPLAY 'READING: ' FILE-RECORD
     END-READ
    END-PERFORM.

DELETE-FILE.
    CALL 'C$DELETE' USING 'file-to-delete.txt'
     RETURNING WS-DELETE-STATUS.
    IF WS-DELETE-STATUS = '00'
     DISPLAY 'FILE DELETED SUCCESSFULLY'
    ELSE
     DISPLAY 'ERROR DELETING FILE'
    END-IF.

UNUSED-PROCEDURE.
    DISPLAY 'THIS PROCEDURE DOES NOTHING'.

