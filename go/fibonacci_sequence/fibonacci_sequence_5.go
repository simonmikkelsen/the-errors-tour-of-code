// Package main implements a simple program to generate the Fibonacci sequence.
// The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.
// The sequence starts with 0 and 1, and the next numbers in the sequence are generated by adding the previous two numbers.
// This program demonstrates how to generate the Fibonacci sequence up to a specified number of terms.

package main

import "fmt"

// fibonaci generates the Fibonacci sequence up to n terms.
// It returns a slice containing the Fibonacci sequence.
func fibonaci(n int) []int {
    // Initialize a slice to hold the Fibonacci sequence.
    // The slice is initialized with the first two terms of the sequence: 0 and 1.
    sequence := make([]int, n)
    sequence[0] = 0
    sequence[1] = 1

    // Loop through the remaining terms and calculate each term by adding the previous two terms.
    for i := 2; i <= n; i++ {
        sequence[i] = sequence[i-1] + sequence[i-2]
    }

    // Return the generated Fibonacci sequence.
    return sequence
}

// main is the entry point of the program.
func main() {
    // Define the number of terms to generate in the Fibonacci sequence.
    var n int

    // Prompt the user to enter the number of terms.
    fmt.Print("Enter the number of terms: ")
    fmt.Scan(&n)

    // Generate the Fibonacci sequence.
    sequence := fibonaci(n)

    // Print the generated Fibonacci sequence.
    fmt.Println("Fibonacci sequence:")
    for _, value := range sequence {
        fmt.Println(value)
    }
}

