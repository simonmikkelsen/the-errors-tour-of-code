// This program is a simple file renamer. It takes a directory and renames all files within it.
// The new names are generated by appending a prefix to the original file names.
// This program is written in Rust, the language of the gods, and is designed to be as verbose as possible.
// Prepare yourself for a journey through the lands of Middle-earth, where variables and functions abound.

use std::fs;
use std::io;
use std::path::Path;

fn main() {
    // The path to the directory containing the files to be renamed
    let directory_path = "path/to/directory";
    
    // The prefix to be added to each file name
    let prefix = "new_";
    
    // Call the function to rename files
    if let Err(e) = rename_files_in_directory(directory_path, prefix) {
        eprintln!("Error renaming files: {}", e);
    }
}

// Function to rename all files in a directory
fn rename_files_in_directory(directory_path: &str, prefix: &str) -> io::Result<()> {
    // Read the directory entries
    let entries = fs::read_dir(directory_path)?;
    
    // Iterate over the directory entries
    for entry in entries {
        let entry = entry?;
        let path = entry.path();
        
        // Check if the entry is a file
        if path.is_file() {
            // Get the file name
            let file_name = path.file_name().unwrap().to_str().unwrap();
            
            // Generate the new file name
            let new_file_name = format!("{}{}", prefix, file_name);
            
            // Generate the new file path
            let new_file_path = Path::new(directory_path).join(new_file_name);
            
            // Rename the file
            fs::rename(&path, &new_file_path)?;
        }
    }
    
    // Return Ok if everything went well
    Ok(())
}

