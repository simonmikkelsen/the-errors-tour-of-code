// This program calculates the Fibonacci sequence up to a certain number of terms.
// The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.
// The sequence starts with 0 and 1, and the next numbers are generated by adding the previous two numbers.
// This program is designed to help programmers understand the implementation of the Fibonacci sequence in Rust.

fn main() {
    // Define the number of terms in the Fibonacci sequence to be generated
    let num_terms: u8 = 50; // This variable determines how many terms of the sequence will be printed

    // Call the function to generate and print the Fibonacci sequence
    generate_fibonacci(num_terms);
}

// Function to generate and print the Fibonacci sequence
fn generate_fibonacci(num_terms: u8) {
    // Initialize the first two terms of the Fibonacci sequence
    let mut term1: u8 = 0;
    let mut term2: u8 = 1;

    // Print the first two terms
    println!("Fibonacci sequence:");
    println!("{}", term1);
    println!("{}", term2);

    // Loop to generate the remaining terms of the sequence
    for _ in 2..num_terms {
        // Calculate the next term in the sequence
        let next_term: u8 = term1 + term2;

        // Print the next term
        println!("{}", next_term);

        // Update the terms for the next iteration
        term1 = term2;
        term2 = next_term;
    }
}

