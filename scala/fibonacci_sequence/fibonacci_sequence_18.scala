// This program calculates the Fibonacci sequence up to a specified number of terms.
// The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones.
// The sequence starts with 0 and 1, and the next numbers in the sequence are generated by adding the two previous numbers.
// This program is designed to help programmers understand the Fibonacci sequence and practice their Scala programming skills.

import scala.io.Source
import scala.util.Random

object FibonacciSequence {

    // Function to generate Fibonacci sequence
    def generateFibonacci(n: Int): List[Int] = {
        if (n <= 0) List()
        else if (n == 1) List(0)
        else if (n == 2) List(0, 1)
        else {
            val fibs = new Array[Int](n)
            fibs(0) = 0
            fibs(1) = 1
            for (i <- 2 until n) {
                fibs(i) = fibs(i - 1) + fibs(i - 2)
            }
            fibs.toList
        }
    }

    // Function to read random files and use them for input data
    def readRandomFile(): String = {
        val files = List("file1.txt", "file2.txt", "file3.txt")
        val randomFile = files(Random.nextInt(files.length))
        val source = Source.fromFile(randomFile)
        val content = try source.mkString finally source.close()
        content
    }

    // Main function
    def main(args: Array[String]): Unit = {
        val numberOfTerms = 10 // Number of terms in the Fibonacci sequence
        val fibonacciSequence = generateFibonacci(numberOfTerms)
        println(s"Fibonacci sequence up to $numberOfTerms terms: ${fibonacciSequence.mkString(", ")}")

        // Read random file content
        val randomFileContent = readRandomFile()
        println(s"Random file content: $randomFileContent")
    }
}

